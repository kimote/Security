/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["amp"],{

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \****************************************************************************************/
/***/ (function(module) {

eval("function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz8wMmJhIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/regenerator/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/regenerator/index.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0hBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcz9iYzkyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/amp-dev.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/dev/amp-dev.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar _interopRequireDefault2=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");var _regenerator=_interopRequireDefault2(__webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/next/node_modules/@babel/runtime/regenerator/index.js\"));var _eventSourcePolyfill=_interopRequireDefault(__webpack_require__(/*! ./event-source-polyfill */ \"./node_modules/next/dist/client/dev/event-source-polyfill.js\"));var _eventsource=__webpack_require__(/*! ./error-overlay/eventsource */ \"./node_modules/next/dist/client/dev/error-overlay/eventsource.js\");var _onDemandEntriesUtils=__webpack_require__(/*! ./on-demand-entries-utils */ \"./node_modules/next/dist/client/dev/on-demand-entries-utils.js\");var _fouc=__webpack_require__(/*! ./fouc */ \"./node_modules/next/dist/client/dev/fouc.js\");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"next\",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"throw\",err);}_next(undefined);});};}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}if(!window.EventSource){window.EventSource=_eventSourcePolyfill.default;}var data=JSON.parse(document.getElementById('__NEXT_DATA__').textContent);var assetPrefix=data.assetPrefix,page=data.page;assetPrefix=assetPrefix||'';var mostRecentHash=null;var curHash=__webpack_require__.h();var hotUpdatePath=assetPrefix+(assetPrefix.endsWith('/')?'':'/')+'_next/static/webpack/';function isUpdateAvailable(){return mostRecentHash!==__webpack_require__.h();}function canApplyUpdates(){return module.hot.status()==='idle';}function _tryApplyUpdates(){_tryApplyUpdates=_asyncToGenerator(_regenerator.default.mark(function _callee(){var res,jsonData,curPage,pageUpdated;return _regenerator.default.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!isUpdateAvailable()||!canApplyUpdates())){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.prev=2;_context.next=5;return fetch(typeof __webpack_require__.j!=='undefined'?\"\"+hotUpdatePath+curHash+\".\"+__webpack_require__.j+\".hot-update.json\":\"\"+hotUpdatePath+curHash+\".hot-update.json\");case 5:res=_context.sent;_context.next=8;return res.json();case 8:jsonData=_context.sent;curPage=page==='/'?'index':page;pageUpdated=(Array.isArray(jsonData.c)?jsonData.c:Object.keys(jsonData.c)).some(function(mod){return mod.indexOf(\"pages\"+(curPage.substr(0,1)==='/'?curPage:\"/\"+curPage))!==-1||mod.indexOf((\"pages\"+(curPage.substr(0,1)==='/'?curPage:\"/\"+curPage)).replace(/\\//g,'\\\\'))!==-1;});if(pageUpdated){document.location.reload(true);}else{curHash=mostRecentHash;}_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](2);console.error('Error occurred checking for update',_context.t0);document.location.reload(true);case 18:case\"end\":return _context.stop();}}},_callee,null,[[2,14]]);}));return _tryApplyUpdates.apply(this,arguments);}function tryApplyUpdates(){return _tryApplyUpdates.apply(this,arguments);}(0,_eventsource).addMessageListener(function(event){if(event.data===\"\\uD83D\\uDC93\"){return;}try{var message=JSON.parse(event.data);if(message.action==='sync'||message.action==='built'){if(!message.hash){return;}mostRecentHash=message.hash;tryApplyUpdates();}else if(message.action==='reloadPage'){document.location.reload(true);}}catch(ex){console.warn('Invalid HMR message: '+event.data+'\\n'+ex);}});(0,_onDemandEntriesUtils).setupPing(assetPrefix,function(){return page;});(0,_fouc).displayContent();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/amp-dev.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/error-overlay/eventsource.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/error-overlay/eventsource.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({value:true}));exports.addMessageListener=addMessageListener;exports.getEventSourceWrapper=getEventSourceWrapper;var eventCallbacks=[];function EventSourceWrapper(options){var source;var lastActivity=new Date();var listeners=[];if(!options.timeout){options.timeout=20*1000;}init();var timer=setInterval(function(){if(new Date()-lastActivity>options.timeout){handleDisconnect();}},options.timeout/2);function init(){source=new window.EventSource(options.path);source.onopen=handleOnline;source.onerror=handleDisconnect;source.onmessage=handleMessage;}function handleOnline(){if(options.log)console.log('[HMR] connected');lastActivity=new Date();}function handleMessage(event){lastActivity=new Date();for(var i=0;i<listeners.length;i++){listeners[i](event);}eventCallbacks.forEach(function(cb){if(!cb.unfiltered&&event.data.indexOf('action')===-1)return;cb(event);});}function handleDisconnect(){clearInterval(timer);source.close();setTimeout(init,options.timeout);}return{close:function close(){clearInterval(timer);source.close();},addMessageListener:function addMessageListener(fn){listeners.push(fn);}};}_c=EventSourceWrapper;function addMessageListener(cb){eventCallbacks.push(cb);}function getEventSourceWrapper(options){return EventSourceWrapper(options);}var _c;$RefreshReg$(_c,\"EventSourceWrapper\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZXJyb3Itb3ZlcmxheS9ldmVudHNvdXJjZS5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQ0FBLDhDQUE2QyxDQUN6Q0csS0FBSyxDQUFFLElBRGtDLENBQTdDLEdBR0FELDBCQUFBLENBQTZCRSxrQkFBN0IsQ0FDQUYsNkJBQUEsQ0FBZ0NHLHFCQUFoQyxDQUNBLEdBQU1DLENBQUFBLGNBQWMsQ0FBRyxFQUF2QixDQUNBLFFBQVNDLENBQUFBLGtCQUFULENBQTRCQyxPQUE1QixDQUFxQyxDQUNqQyxHQUFJQyxDQUFBQSxNQUFKLENBQ0EsR0FBSUMsQ0FBQUEsWUFBWSxDQUFHLEdBQUlDLENBQUFBLElBQUosRUFBbkIsQ0FDQSxHQUFJQyxDQUFBQSxTQUFTLENBQUcsRUFBaEIsQ0FDQSxHQUFJLENBQUNKLE9BQU8sQ0FBQ0ssT0FBYixDQUFzQixDQUNsQkwsT0FBTyxDQUFDSyxPQUFSLENBQWtCLEdBQUssSUFBdkIsQ0FDSCxDQUNEQyxJQUFJLEdBQ0osR0FBSUMsQ0FBQUEsS0FBSyxDQUFHQyxXQUFXLENBQUMsVUFBVyxDQUMvQixHQUFJLEdBQUlMLENBQUFBLElBQUosR0FBYUQsWUFBYixDQUE0QkYsT0FBTyxDQUFDSyxPQUF4QyxDQUFpRCxDQUM3Q0ksZ0JBQWdCLEdBQ25CLENBQ0osQ0FKc0IsQ0FJcEJULE9BQU8sQ0FBQ0ssT0FBUixDQUFrQixDQUpFLENBQXZCLENBS0EsUUFBU0MsQ0FBQUEsSUFBVCxFQUFnQixDQUNaTCxNQUFNLENBQUcsR0FBSVMsQ0FBQUEsTUFBTSxDQUFDQyxXQUFYLENBQXVCWCxPQUFPLENBQUNZLElBQS9CLENBQVQsQ0FDQVgsTUFBTSxDQUFDWSxNQUFQLENBQWdCQyxZQUFoQixDQUNBYixNQUFNLENBQUNjLE9BQVAsQ0FBaUJOLGdCQUFqQixDQUNBUixNQUFNLENBQUNlLFNBQVAsQ0FBbUJDLGFBQW5CLENBQ0gsQ0FDRCxRQUFTSCxDQUFBQSxZQUFULEVBQXdCLENBQ3BCLEdBQUlkLE9BQU8sQ0FBQ2tCLEdBQVosQ0FBaUJDLE9BQU8sQ0FBQ0QsR0FBUixDQUFZLGlCQUFaLEVBQ2pCaEIsWUFBWSxDQUFHLEdBQUlDLENBQUFBLElBQUosRUFBZixDQUNILENBQ0QsUUFBU2MsQ0FBQUEsYUFBVCxDQUF1QkcsS0FBdkIsQ0FBOEIsQ0FDMUJsQixZQUFZLENBQUcsR0FBSUMsQ0FBQUEsSUFBSixFQUFmLENBQ0EsSUFBSSxHQUFJa0IsQ0FBQUEsQ0FBQyxDQUFHLENBQVosQ0FBZUEsQ0FBQyxDQUFHakIsU0FBUyxDQUFDa0IsTUFBN0IsQ0FBcUNELENBQUMsRUFBdEMsQ0FBeUMsQ0FDckNqQixTQUFTLENBQUNpQixDQUFELENBQVQsQ0FBYUQsS0FBYixFQUNILENBQ0R0QixjQUFjLENBQUN5QixPQUFmLENBQXVCLFNBQUNDLEVBQUQsQ0FBTSxDQUN6QixHQUFJLENBQUNBLEVBQUUsQ0FBQ0MsVUFBSixFQUFrQkwsS0FBSyxDQUFDTSxJQUFOLENBQVdDLE9BQVgsQ0FBbUIsUUFBbkIsSUFBaUMsQ0FBQyxDQUF4RCxDQUEyRCxPQUMzREgsRUFBRSxDQUFDSixLQUFELENBQUYsQ0FDSCxDQUhELEVBSUgsQ0FDRCxRQUFTWCxDQUFBQSxnQkFBVCxFQUE0QixDQUN4Qm1CLGFBQWEsQ0FBQ3JCLEtBQUQsQ0FBYixDQUNBTixNQUFNLENBQUM0QixLQUFQLEdBQ0FDLFVBQVUsQ0FBQ3hCLElBQUQsQ0FBT04sT0FBTyxDQUFDSyxPQUFmLENBQVYsQ0FDSCxDQUNELE1BQU8sQ0FDSHdCLEtBQUssQ0FBRSxnQkFBSSxDQUNQRCxhQUFhLENBQUNyQixLQUFELENBQWIsQ0FDQU4sTUFBTSxDQUFDNEIsS0FBUCxHQUNILENBSkUsQ0FLSGpDLGtCQUFrQixDQUFFLDRCQUFTbUMsRUFBVCxDQUFhLENBQzdCM0IsU0FBUyxDQUFDNEIsSUFBVixDQUFlRCxFQUFmLEVBQ0gsQ0FQRSxDQUFQLENBU0gsSUEvQ1FoQyxtQkFnRFQsUUFBU0gsQ0FBQUEsa0JBQVQsQ0FBNEI0QixFQUE1QixDQUFnQyxDQUM1QjFCLGNBQWMsQ0FBQ2tDLElBQWYsQ0FBb0JSLEVBQXBCLEVBQ0gsQ0FDRCxRQUFTM0IsQ0FBQUEscUJBQVQsQ0FBK0JHLE9BQS9CLENBQXdDLENBQ3BDLE1BQU9ELENBQUFBLGtCQUFrQixDQUFDQyxPQUFELENBQXpCLENBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L2Vycm9yLW92ZXJsYXkvZXZlbnRzb3VyY2UuanM/YTM0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkTWVzc2FnZUxpc3RlbmVyID0gYWRkTWVzc2FnZUxpc3RlbmVyO1xuZXhwb3J0cy5nZXRFdmVudFNvdXJjZVdyYXBwZXIgPSBnZXRFdmVudFNvdXJjZVdyYXBwZXI7XG5jb25zdCBldmVudENhbGxiYWNrcyA9IFtdO1xuZnVuY3Rpb24gRXZlbnRTb3VyY2VXcmFwcGVyKG9wdGlvbnMpIHtcbiAgICB2YXIgc291cmNlO1xuICAgIHZhciBsYXN0QWN0aXZpdHkgPSBuZXcgRGF0ZSgpO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICBpZiAoIW9wdGlvbnMudGltZW91dCkge1xuICAgICAgICBvcHRpb25zLnRpbWVvdXQgPSAyMCAqIDEwMDA7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICB2YXIgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0QWN0aXZpdHkgPiBvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIGhhbmRsZURpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH0sIG9wdGlvbnMudGltZW91dCAvIDIpO1xuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHNvdXJjZSA9IG5ldyB3aW5kb3cuRXZlbnRTb3VyY2Uob3B0aW9ucy5wYXRoKTtcbiAgICAgICAgc291cmNlLm9ub3BlbiA9IGhhbmRsZU9ubGluZTtcbiAgICAgICAgc291cmNlLm9uZXJyb3IgPSBoYW5kbGVEaXNjb25uZWN0O1xuICAgICAgICBzb3VyY2Uub25tZXNzYWdlID0gaGFuZGxlTWVzc2FnZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlT25saW5lKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5sb2cpIGNvbnNvbGUubG9nKCdbSE1SXSBjb25uZWN0ZWQnKTtcbiAgICAgICAgbGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShldmVudCkge1xuICAgICAgICBsYXN0QWN0aXZpdHkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tpXShldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRDYWxsYmFja3MuZm9yRWFjaCgoY2IpPT57XG4gICAgICAgICAgICBpZiAoIWNiLnVuZmlsdGVyZWQgJiYgZXZlbnQuZGF0YS5pbmRleE9mKCdhY3Rpb24nKSA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgICAgIGNiKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZURpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICBzb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgc2V0VGltZW91dChpbml0LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjbG9zZTogKCk9PntcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgc291cmNlLmNsb3NlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZE1lc3NhZ2VMaXN0ZW5lcjogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRNZXNzYWdlTGlzdGVuZXIoY2IpIHtcbiAgICBldmVudENhbGxiYWNrcy5wdXNoKGNiKTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzb3VyY2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWRkTWVzc2FnZUxpc3RlbmVyIiwiZ2V0RXZlbnRTb3VyY2VXcmFwcGVyIiwiZXZlbnRDYWxsYmFja3MiLCJFdmVudFNvdXJjZVdyYXBwZXIiLCJvcHRpb25zIiwic291cmNlIiwibGFzdEFjdGl2aXR5IiwiRGF0ZSIsImxpc3RlbmVycyIsInRpbWVvdXQiLCJpbml0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImhhbmRsZURpc2Nvbm5lY3QiLCJ3aW5kb3ciLCJFdmVudFNvdXJjZSIsInBhdGgiLCJvbm9wZW4iLCJoYW5kbGVPbmxpbmUiLCJvbmVycm9yIiwib25tZXNzYWdlIiwiaGFuZGxlTWVzc2FnZSIsImxvZyIsImNvbnNvbGUiLCJldmVudCIsImkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2IiLCJ1bmZpbHRlcmVkIiwiZGF0YSIsImluZGV4T2YiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJzZXRUaW1lb3V0IiwiZm4iLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/error-overlay/eventsource.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/event-source-polyfill.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/event-source-polyfill.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({value:true}));exports.default=void 0;var document=window.document;var Response1=window.Response;var TextDecoder1=window.TextDecoder;var TextEncoder1=window.TextEncoder;var AbortController1=window.AbortController;if(AbortController1==undefined){AbortController1=function AbortController1(){this.signal=null;this.abort=function(){};};}function TextDecoderPolyfill(){this.bitsNeeded=0;this.codePoint=0;}_c=TextDecoderPolyfill;TextDecoderPolyfill.prototype.decode=function(octets){function valid(codePoint,shift,octetsCount){if(octetsCount===1){return codePoint>=128>>shift&&codePoint<<shift<=2047;}if(octetsCount===2){return codePoint>=2048>>shift&&codePoint<<shift<=55295||codePoint>=57344>>shift&&codePoint<<shift<=65535;}if(octetsCount===3){return codePoint>=65536>>shift&&codePoint<<shift<=1114111;}throw new Error();}function octetsCount(bitsNeeded,codePoint){if(bitsNeeded===6*1){return codePoint>>6>15?3:codePoint>31?2:1;}if(bitsNeeded===6*2){return codePoint>15?3:2;}if(bitsNeeded===6*3){return 3;}throw new Error();}var REPLACER=65533;var string='';var bitsNeeded=this.bitsNeeded;var codePoint=this.codePoint;for(var i=0;i<octets.length;i+=1){var octet=octets[i];if(bitsNeeded!==0){if(octet<128||octet>191||!valid(codePoint<<6|octet&63,bitsNeeded-6,octetsCount(bitsNeeded,codePoint))){bitsNeeded=0;codePoint=REPLACER;string+=String.fromCharCode(codePoint);}}if(bitsNeeded===0){if(octet>=0&&octet<=127){bitsNeeded=0;codePoint=octet;}else if(octet>=192&&octet<=223){bitsNeeded=6*1;codePoint=octet&31;}else if(octet>=224&&octet<=239){bitsNeeded=6*2;codePoint=octet&15;}else if(octet>=240&&octet<=247){bitsNeeded=6*3;codePoint=octet&7;}else{bitsNeeded=0;codePoint=REPLACER;}if(bitsNeeded!==0&&!valid(codePoint,bitsNeeded,octetsCount(bitsNeeded,codePoint))){bitsNeeded=0;codePoint=REPLACER;}}else{bitsNeeded-=6;codePoint=codePoint<<6|octet&63;}if(bitsNeeded===0){if(codePoint<=65535){string+=String.fromCharCode(codePoint);}else{string+=String.fromCharCode(55296+(codePoint-65535-1>>10));string+=String.fromCharCode(56320+(codePoint-65535-1&1023));}}}this.bitsNeeded=bitsNeeded;this.codePoint=codePoint;return string;};var supportsStreamOption=function supportsStreamOption(){try{return new TextDecoder1().decode(new TextEncoder1().encode('test'),{stream:true})==='test';}catch(error){console.log(error);}return false;};if(TextDecoder1==undefined||TextEncoder1==undefined||!supportsStreamOption()){TextDecoder1=TextDecoderPolyfill;}var k=function k(){};function XHRWrapper(xhr){this.withCredentials=false;this.responseType='';this.readyState=0;this.status=0;this.statusText='';this.responseText='';this.onprogress=k;this.onreadystatechange=k;this._contentType='';this._xhr=xhr;this._sendTimeout=0;this._abort=k;}_c2=XHRWrapper;XHRWrapper.prototype.open=function(method,url){this._abort(true);var that=this;var xhr=this._xhr;var state=1;var timeout=0;this._abort=function(silent){if(that._sendTimeout!==0){clearTimeout(that._sendTimeout);that._sendTimeout=0;}if(state===1||state===2||state===3){state=4;xhr.onload=k;xhr.onerror=k;xhr.onabort=k;xhr.onprogress=k;xhr.onreadystatechange=k;xhr.abort();if(timeout!==0){clearTimeout(timeout);timeout=0;}if(!silent){that.readyState=4;that.onreadystatechange();}}state=0;};var onStart=function onStart(){if(state===1){var status=0;var statusText='';var contentType=undefined;if(!('contentType'in xhr)){try{status=xhr.status;statusText=xhr.statusText;contentType=xhr.getResponseHeader('Content-Type');}catch(error){status=0;statusText='';contentType=undefined;}}else{status=200;statusText='OK';contentType=xhr.contentType;}if(status!==0){state=2;that.readyState=2;that.status=status;that.statusText=statusText;that._contentType=contentType;that.onreadystatechange();}}};var onProgress=function onProgress(){onStart();if(state===2||state===3){state=3;var responseText='';try{responseText=xhr.responseText;}catch(error){}that.readyState=3;that.responseText=responseText;that.onprogress();}};var onFinish=function onFinish(){onProgress();if(state===1||state===2||state===3){state=4;if(timeout!==0){clearTimeout(timeout);timeout=0;}that.readyState=4;that.onreadystatechange();}};var onReadyStateChange=function onReadyStateChange(){if(xhr!=undefined){if(xhr.readyState===4){onFinish();}else if(xhr.readyState===3){onProgress();}else if(xhr.readyState===2){onStart();}}};var onTimeout=function onTimeout(){timeout=setTimeout(function(){onTimeout();},500);if(xhr.readyState===3){onProgress();}};xhr.onload=onFinish;xhr.onerror=onFinish;xhr.onabort=onFinish;if(!('sendAsBinary'in XMLHttpRequest.prototype)&&!('mozAnon'in XMLHttpRequest.prototype)){xhr.onprogress=onProgress;}xhr.onreadystatechange=onReadyStateChange;if('contentType'in xhr){url+=(url.indexOf('?')===-1?'?':'&')+'padding=true';}xhr.open(method,url,true);if('readyState'in xhr){timeout=setTimeout(function(){onTimeout();},0);}};XHRWrapper.prototype.abort=function(){this._abort(false);};XHRWrapper.prototype.getResponseHeader=function(name){return this._contentType;};XHRWrapper.prototype.setRequestHeader=function(name,value){var xhr=this._xhr;if('setRequestHeader'in xhr){xhr.setRequestHeader(name,value);}};XHRWrapper.prototype.getAllResponseHeaders=function(){return this._xhr.getAllResponseHeaders!=undefined?this._xhr.getAllResponseHeaders():'';};XHRWrapper.prototype.send=function(){if(!('ontimeout'in XMLHttpRequest.prototype)&&document!=undefined&&document.readyState!=undefined&&document.readyState!=='complete'){var that=this;that._sendTimeout=setTimeout(function(){that._sendTimeout=0;that.send();},4);return;}var xhr=this._xhr;xhr.withCredentials=this.withCredentials;xhr.responseType=this.responseType;try{xhr.send(undefined);}catch(error1){throw error1;}};function toLowerCase(name){return name.replace(/[A-Z]/g,function(c){return String.fromCharCode(c.charCodeAt(0)+32);});}function HeadersPolyfill(all){var map=Object.create(null);var array=all.split('\\r\\n');for(var i=0;i<array.length;i+=1){var line=array[i];var parts=line.split(': ');var name=parts.shift();var value=parts.join(': ');map[toLowerCase(name)]=value;}this._map=map;}_c3=HeadersPolyfill;HeadersPolyfill.prototype.get=function(name){return this._map[toLowerCase(name)];};function XHRTransport(){}_c4=XHRTransport;XHRTransport.prototype.open=function(xhr,onStartCallback,onProgressCallback,onFinishCallback,url,withCredentials,headers){xhr.open('GET',url);var offset=0;xhr.onprogress=function(){var responseText=xhr.responseText;var chunk=responseText.slice(offset);offset+=chunk.length;onProgressCallback(chunk);};xhr.onreadystatechange=function(){if(xhr.readyState===2){var status=xhr.status;var statusText=xhr.statusText;var contentType=xhr.getResponseHeader('Content-Type');var headers1=xhr.getAllResponseHeaders();onStartCallback(status,statusText,contentType,new HeadersPolyfill(headers1),function(){xhr.abort();});}else if(xhr.readyState===4){onFinishCallback();}};xhr.withCredentials=withCredentials;xhr.responseType='text';for(var name in headers){if(Object.prototype.hasOwnProperty.call(headers,name)){xhr.setRequestHeader(name,headers[name]);}}xhr.send();};function HeadersWrapper(headers2){this._headers=headers2;}_c5=HeadersWrapper;HeadersWrapper.prototype.get=function(name){return this._headers.get(name);};function FetchTransport(){}_c6=FetchTransport;FetchTransport.prototype.open=function(xhr,onStartCallback,onProgressCallback,onFinishCallback,url,withCredentials,headers2){var controller=new AbortController1();var signal=controller.signal;var textDecoder=new TextDecoder1();fetch(url,{headers:headers2,credentials:withCredentials?'include':'same-origin',signal:signal,cache:'no-store'}).then(function(response){var reader=response.body.getReader();onStartCallback(response.status,response.statusText,response.headers.get('Content-Type'),new HeadersWrapper(response.headers),function(){controller.abort();reader.cancel();});return new Promise(function(resolve,reject){var readNextChunk=function readNextChunk(){reader.read().then(function(result){if(result.done){resolve(undefined);}else{var chunk=textDecoder.decode(result.value,{stream:true});onProgressCallback(chunk);readNextChunk();}})['catch'](function(error){reject(error);});};readNextChunk();});}).then(function(result){onFinishCallback();return result;},function(error){onFinishCallback();return Promise.reject(error);});};function EventTarget1(){this._listeners=Object.create(null);}_c7=EventTarget1;function throwError(e){setTimeout(function(){throw e;},0);}EventTarget1.prototype.dispatchEvent=function(event){event.target=this;var typeListeners=this._listeners[event.type];if(typeListeners!=undefined){var length=typeListeners.length;for(var i=0;i<length;i+=1){var listener=typeListeners[i];try{if(typeof listener.handleEvent==='function'){listener.handleEvent(event);}else{listener.call(this,event);}}catch(e){throwError(e);}}}};EventTarget1.prototype.addEventListener=function(type,listener){type=String(type);var listeners=this._listeners;var typeListeners=listeners[type];if(typeListeners==undefined){typeListeners=[];listeners[type]=typeListeners;}var found=false;for(var i=0;i<typeListeners.length;i+=1){if(typeListeners[i]===listener){found=true;}}if(!found){typeListeners.push(listener);}};EventTarget1.prototype.removeEventListener=function(type,listener){type=String(type);var listeners=this._listeners;var typeListeners=listeners[type];if(typeListeners!=undefined){var filtered=[];for(var i=0;i<typeListeners.length;i+=1){if(typeListeners[i]!==listener){filtered.push(typeListeners[i]);}}if(filtered.length===0){delete listeners[type];}else{listeners[type]=filtered;}}};function Event1(type){this.type=type;this.target=undefined;}_c8=Event1;function MessageEvent1(type,options){Event1.call(this,type);this.data=options.data;this.lastEventId=options.lastEventId;}_c9=MessageEvent1;MessageEvent1.prototype=Object.create(Event1.prototype);function ConnectionEvent(type,options){Event1.call(this,type);this.status=options.status;this.statusText=options.statusText;this.headers=options.headers;}_c10=ConnectionEvent;ConnectionEvent.prototype=Object.create(Event1.prototype);var WAITING=-1;var CONNECTING=0;var OPEN=1;var CLOSED=2;var AFTER_CR=-1;var FIELD_START=0;var FIELD=1;var VALUE_START=2;var VALUE=3;var contentTypeRegExp=/^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;var MINIMUM_DURATION=1000;var MAXIMUM_DURATION=18000000;var parseDuration=function parseDuration(value,def){var n=parseInt(value,10);if(n!==n){n=def;}return clampDuration(n);};var clampDuration=function clampDuration(n){return Math.min(Math.max(n,MINIMUM_DURATION),MAXIMUM_DURATION);};var fire=function fire(that,f,event){try{if(typeof f==='function'){f.call(that,event);}}catch(e){throwError(e);}};function EventSourcePolyfill(url,options){EventTarget1.call(this);this.onopen=undefined;this.onmessage=undefined;this.onerror=undefined;this.url=undefined;this.readyState=undefined;this.withCredentials=undefined;this._close=undefined;start(this,url,options);}_c11=EventSourcePolyfill;var isFetchSupported=fetch!=undefined&&Response1!=undefined&&'body'in Response1.prototype;function start(es,url,options){url=String(url);var withCredentials=options!=undefined&&Boolean(options.withCredentials);var initialRetry=clampDuration(1000);var heartbeatTimeout=options!=undefined&&options.heartbeatTimeout!=undefined?parseDuration(options.heartbeatTimeout,45000):clampDuration(45000);var lastEventId='';var retry=initialRetry;var wasActivity=false;var headers2=options!=undefined&&options.headers!=undefined?JSON.parse(JSON.stringify(options.headers)):undefined;var CurrentTransport=options!=undefined&&options.Transport!=undefined?options.Transport:XMLHttpRequest;var xhr=isFetchSupported&&!(options!=undefined&&options.Transport!=undefined)?undefined:new XHRWrapper(new CurrentTransport());var transport=xhr==undefined?new FetchTransport():new XHRTransport();var cancelFunction=undefined;var timeout=0;var currentState=WAITING;var dataBuffer='';var lastEventIdBuffer='';var eventTypeBuffer='';var textBuffer='';var state=FIELD_START;var fieldStart=0;var valueStart=0;var onStart=function onStart(status,statusText,contentType,headers3,cancel){if(currentState===CONNECTING){cancelFunction=cancel;if(status===200&&contentType!=undefined&&contentTypeRegExp.test(contentType)){currentState=OPEN;wasActivity=true;retry=initialRetry;es.readyState=OPEN;var event=new ConnectionEvent('open',{status:status,statusText:statusText,headers:headers3});es.dispatchEvent(event);fire(es,es.onopen,event);}else{var message='';if(status!==200){if(statusText){statusText=statusText.replace(/\\s+/g,' ');}message=\"EventSource's response has a status \"+status+' '+statusText+' that is not 200. Aborting the connection.';}else{message=\"EventSource's response has a Content-Type specifying an unsupported type: \"+(contentType==undefined?'-':contentType.replace(/\\s+/g,' '))+'. Aborting the connection.';}throwError(new Error(message));close();var event=new ConnectionEvent('error',{status:status,statusText:statusText,headers:headers3});es.dispatchEvent(event);fire(es,es.onerror,event);}}};var onProgress=function onProgress(textChunk){if(currentState===OPEN){var n=-1;for(var i=0;i<textChunk.length;i+=1){var c=textChunk.charCodeAt(i);if(c==='\\n'.charCodeAt(0)||c==='\\r'.charCodeAt(0)){n=i;}}var chunk=(n!==-1?textBuffer:'')+textChunk.slice(0,n+1);textBuffer=(n===-1?textBuffer:'')+textChunk.slice(n+1);if(chunk!==''){wasActivity=true;}for(var position=0;position<chunk.length;position+=1){var c=chunk.charCodeAt(position);if(state===AFTER_CR&&c==='\\n'.charCodeAt(0)){state=FIELD_START;}else{if(state===AFTER_CR){state=FIELD_START;}if(c==='\\r'.charCodeAt(0)||c==='\\n'.charCodeAt(0)){if(state!==FIELD_START){if(state===FIELD){valueStart=position+1;}var field=chunk.slice(fieldStart,valueStart-1);var value=chunk.slice(valueStart+(valueStart<position&&chunk.charCodeAt(valueStart)===' '.charCodeAt(0)?1:0),position);if(field==='data'){dataBuffer+='\\n';dataBuffer+=value;}else if(field==='id'){lastEventIdBuffer=value;}else if(field==='event'){eventTypeBuffer=value;}else if(field==='retry'){initialRetry=parseDuration(value,initialRetry);retry=initialRetry;}else if(field==='heartbeatTimeout'){heartbeatTimeout=parseDuration(value,heartbeatTimeout);if(timeout!==0){clearTimeout(timeout);timeout=setTimeout(function(){onTimeout();},heartbeatTimeout);}}}if(state===FIELD_START){if(dataBuffer!==''){lastEventId=lastEventIdBuffer;if(eventTypeBuffer===''){eventTypeBuffer='message';}var event=new MessageEvent1(eventTypeBuffer,{data:dataBuffer.slice(1),lastEventId:lastEventIdBuffer});es.dispatchEvent(event);if(eventTypeBuffer==='message'){fire(es,es.onmessage,event);}if(currentState===CLOSED){return;}}dataBuffer='';eventTypeBuffer='';}state=c==='\\r'.charCodeAt(0)?AFTER_CR:FIELD_START;}else{if(state===FIELD_START){fieldStart=position;state=FIELD;}if(state===FIELD){if(c===':'.charCodeAt(0)){valueStart=position+1;state=VALUE_START;}}else if(state===VALUE_START){state=VALUE;}}}}}};var onFinish=function onFinish(){if(currentState===OPEN||currentState===CONNECTING){currentState=WAITING;if(timeout!==0){clearTimeout(timeout);timeout=0;}timeout=setTimeout(function(){onTimeout();},retry);retry=clampDuration(Math.min(initialRetry*16,retry*2));es.readyState=CONNECTING;var event=new Event1('error');es.dispatchEvent(event);fire(es,es.onerror,event);}};var close=function close(){currentState=CLOSED;if(cancelFunction!=undefined){cancelFunction();cancelFunction=undefined;}if(timeout!==0){clearTimeout(timeout);timeout=0;}es.readyState=CLOSED;};var onTimeout=function onTimeout(){timeout=0;if(currentState!==WAITING){if(!wasActivity&&cancelFunction!=undefined){throwError(new Error('No activity within '+heartbeatTimeout+' milliseconds. Reconnecting.'));cancelFunction();cancelFunction=undefined;}else{wasActivity=false;timeout=setTimeout(function(){onTimeout();},heartbeatTimeout);}return;}wasActivity=false;timeout=setTimeout(function(){onTimeout();},heartbeatTimeout);currentState=CONNECTING;dataBuffer='';eventTypeBuffer='';lastEventIdBuffer=lastEventId;textBuffer='';fieldStart=0;valueStart=0;state=FIELD_START;var requestURL=url;if(url.slice(0,5)!=='data:'&&url.slice(0,5)!=='blob:'){if(lastEventId!==''){requestURL+=(url.indexOf('?')===-1?'?':'&')+'lastEventId='+encodeURIComponent(lastEventId);}}var requestHeaders={};requestHeaders['Accept']='text/event-stream';if(headers2!=undefined){for(var name in headers2){if(Object.prototype.hasOwnProperty.call(headers2,name)){requestHeaders[name]=headers2[name];}}}try{transport.open(xhr,onStart,onProgress,onFinish,requestURL,withCredentials,requestHeaders);}catch(error){close();throw error;}};es.url=url;es.readyState=CONNECTING;es.withCredentials=withCredentials;es._close=close;onTimeout();}EventSourcePolyfill.prototype=Object.create(EventTarget1.prototype);EventSourcePolyfill.prototype.CONNECTING=CONNECTING;EventSourcePolyfill.prototype.OPEN=OPEN;EventSourcePolyfill.prototype.CLOSED=CLOSED;EventSourcePolyfill.prototype.close=function(){this._close();};EventSourcePolyfill.CONNECTING=CONNECTING;EventSourcePolyfill.OPEN=OPEN;EventSourcePolyfill.CLOSED=CLOSED;EventSourcePolyfill.prototype.withCredentials=undefined;var _default=EventSourcePolyfill;exports.default=_default;var _c,_c2,_c3,_c4,_c5,_c6,_c7,_c8,_c9,_c10,_c11;$RefreshReg$(_c,\"TextDecoderPolyfill\");$RefreshReg$(_c2,\"XHRWrapper\");$RefreshReg$(_c3,\"HeadersPolyfill\");$RefreshReg$(_c4,\"XHRTransport\");$RefreshReg$(_c5,\"HeadersWrapper\");$RefreshReg$(_c6,\"FetchTransport\");$RefreshReg$(_c7,\"EventTarget1\");$RefreshReg$(_c8,\"Event1\");$RefreshReg$(_c9,\"MessageEvent1\");$RefreshReg$(_c10,\"ConnectionEvent\");$RefreshReg$(_c11,\"EventSourcePolyfill\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/event-source-polyfill.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/fouc.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/client/dev/fouc.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({value:true}));exports.displayContent=displayContent;function displayContent(callback){(window.requestAnimationFrame||setTimeout)(function(){for(var x=document.querySelectorAll('[data-next-hide-fouc]'),i=x.length;i--;){x[i].parentNode.removeChild(x[i]);}if(callback){callback();}});}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZm91Yy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQ0FBLDhDQUE2QyxDQUN6Q0csS0FBSyxDQUFFLElBRGtDLENBQTdDLEdBR0FELHNCQUFBLENBQXlCRSxjQUF6QixDQUNBLFFBQVNBLENBQUFBLGNBQVQsQ0FBd0JDLFFBQXhCLENBQWtDLENBQzlCLENBQUNDLE1BQU0sQ0FBQ0MscUJBQVAsRUFBZ0NDLFVBQWpDLEVBQTZDLFVBQVcsQ0FDcEQsSUFBSSxHQUFJQyxDQUFBQSxDQUFDLENBQUdDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsdUJBQTFCLENBQVIsQ0FBNERDLENBQUMsQ0FBR0gsQ0FBQyxDQUFDSSxNQUF0RSxDQUE4RUQsQ0FBQyxFQUEvRSxFQUFtRixDQUMvRUgsQ0FBQyxDQUFDRyxDQUFELENBQUQsQ0FBS0UsVUFBTCxDQUFnQkMsV0FBaEIsQ0FBNEJOLENBQUMsQ0FBQ0csQ0FBRCxDQUE3QixFQUNILENBQ0QsR0FBSVAsUUFBSixDQUFjLENBQ1ZBLFFBQVEsR0FDWCxDQUNKLENBUEQsRUFRSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZm91Yy5qcz8zZjBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kaXNwbGF5Q29udGVudCA9IGRpc3BsYXlDb250ZW50O1xuZnVuY3Rpb24gZGlzcGxheUNvbnRlbnQoY2FsbGJhY2spIHtcbiAgICAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0KShmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yKHZhciB4ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbmV4dC1oaWRlLWZvdWNdJyksIGkgPSB4Lmxlbmd0aDsgaS0tOyl7XG4gICAgICAgICAgICB4W2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoeFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdWMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGlzcGxheUNvbnRlbnQiLCJjYWxsYmFjayIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJ4IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/fouc.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/on-demand-entries-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/on-demand-entries-utils.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({value:true}));exports.closePing=closePing;exports.setupPing=setupPing;exports.currentPage=void 0;var _eventsource=__webpack_require__(/*! ./error-overlay/eventsource */ \"./node_modules/next/dist/client/dev/error-overlay/eventsource.js\");var evtSource;var currentPage;exports.currentPage=currentPage;function closePing(){if(evtSource)evtSource.close();evtSource=null;}function setupPing(assetPrefix,pathnameFn,retry){var pathname=pathnameFn();if(pathname===currentPage&&!retry)return;exports.currentPage=currentPage=pathname;closePing();evtSource=(0,_eventsource).getEventSourceWrapper({path:assetPrefix+\"/_next/webpack-hmr?page=\"+encodeURIComponent(currentPage),timeout:5000});evtSource.addMessageListener(function(event){if(event.data.indexOf('{')===-1)return;try{var payload=JSON.parse(event.data);if(payload.invalid&&!self.__NEXT_DATA__.err){fetch(location.href,{credentials:'same-origin'}).then(function(pageRes){if(pageRes.status===200){location.reload();}});}}catch(err){console.error('on-demand-entries failed to parse response',err);}});}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvb24tZGVtYW5kLWVudHJpZXMtdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUNBQSw4Q0FBNkMsQ0FDekNHLEtBQUssQ0FBRSxJQURrQyxDQUE3QyxHQUdBRCxpQkFBQSxDQUFvQkUsU0FBcEIsQ0FDQUYsaUJBQUEsQ0FBb0JHLFNBQXBCLENBQ0FILG1CQUFBLENBQXNCLElBQUssRUFBM0IsQ0FDQSxHQUFJSyxDQUFBQSxZQUFZLENBQUdDLG1CQUFPLENBQUMscUdBQTZCLENBQXhELENBQ0EsR0FBSUMsQ0FBQUEsU0FBSixDQUNBLEdBQUlILENBQUFBLFdBQUosQ0FDQUosbUJBQUEsQ0FBc0JJLFdBQXRCLENBQ0EsUUFBU0YsQ0FBQUEsU0FBVCxFQUFxQixDQUNqQixHQUFJSyxTQUFKLENBQWVBLFNBQVMsQ0FBQ0MsS0FBVixHQUNmRCxTQUFTLENBQUcsSUFBWixDQUNILENBQ0QsUUFBU0osQ0FBQUEsU0FBVCxDQUFtQk0sV0FBbkIsQ0FBZ0NDLFVBQWhDLENBQTRDQyxLQUE1QyxDQUFtRCxDQUMvQyxHQUFNQyxDQUFBQSxRQUFRLENBQUdGLFVBQVUsRUFBM0IsQ0FFQSxHQUFJRSxRQUFRLEdBQUtSLFdBQWIsRUFBNEIsQ0FBQ08sS0FBakMsQ0FBd0MsT0FDeENYLG1CQUFBLENBQXNCSSxXQUFXLENBQUdRLFFBQXBDLENBRUFWLFNBQVMsR0FDVEssU0FBUyxDQUFHLENBQUMsRUFBR0YsWUFBSixFQUFrQlEscUJBQWxCLENBQXdDLENBQ2hEQyxJQUFJLENBQUtMLFdBQUwsNEJBQTJDTSxrQkFBa0IsQ0FBQ1gsV0FBRCxDQURqQixDQUVoRFksT0FBTyxDQUFFLElBRnVDLENBQXhDLENBQVosQ0FJQVQsU0FBUyxDQUFDVSxrQkFBVixDQUE2QixTQUFDQyxLQUFELENBQVMsQ0FDbEMsR0FBSUEsS0FBSyxDQUFDQyxJQUFOLENBQVdDLE9BQVgsQ0FBbUIsR0FBbkIsSUFBNEIsQ0FBQyxDQUFqQyxDQUFvQyxPQUNwQyxHQUFJLENBQ0EsR0FBTUMsQ0FBQUEsT0FBTyxDQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsS0FBSyxDQUFDQyxJQUFqQixDQUFoQixDQUlBLEdBQUlFLE9BQU8sQ0FBQ0csT0FBUixFQUFtQixDQUFDQyxJQUFJLENBQUNDLGFBQUwsQ0FBbUJDLEdBQTNDLENBQWdELENBRzVDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVixDQUFnQixDQUNqQkMsV0FBVyxDQUFFLGFBREksQ0FBaEIsQ0FBTCxDQUVHQyxJQUZILENBRVEsU0FBQ0MsT0FBRCxDQUFXLENBQ2YsR0FBSUEsT0FBTyxDQUFDQyxNQUFSLEdBQW1CLEdBQXZCLENBQTRCLENBQ3hCTCxRQUFRLENBQUNNLE1BQVQsR0FDSCxDQUNKLENBTkQsRUFPSCxDQUNKLENBQUMsTUFBT1IsR0FBUCxDQUFZLENBQ1ZTLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLDRDQUFkLENBQTREVixHQUE1RCxFQUNILENBQ0osQ0FyQkQsRUFzQkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L29uLWRlbWFuZC1lbnRyaWVzLXV0aWxzLmpzPzY1NDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb3NlUGluZyA9IGNsb3NlUGluZztcbmV4cG9ydHMuc2V0dXBQaW5nID0gc2V0dXBQaW5nO1xuZXhwb3J0cy5jdXJyZW50UGFnZSA9IHZvaWQgMDtcbnZhciBfZXZlbnRzb3VyY2UgPSByZXF1aXJlKFwiLi9lcnJvci1vdmVybGF5L2V2ZW50c291cmNlXCIpO1xubGV0IGV2dFNvdXJjZTtcbmxldCBjdXJyZW50UGFnZTtcbmV4cG9ydHMuY3VycmVudFBhZ2UgPSBjdXJyZW50UGFnZTtcbmZ1bmN0aW9uIGNsb3NlUGluZygpIHtcbiAgICBpZiAoZXZ0U291cmNlKSBldnRTb3VyY2UuY2xvc2UoKTtcbiAgICBldnRTb3VyY2UgPSBudWxsO1xufVxuZnVuY3Rpb24gc2V0dXBQaW5nKGFzc2V0UHJlZml4LCBwYXRobmFtZUZuLCByZXRyeSkge1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcGF0aG5hbWVGbigpO1xuICAgIC8vIE1ha2Ugc3VyZSB0byBvbmx5IGNyZWF0ZSBuZXcgRXZlbnRTb3VyY2UgcmVxdWVzdCBpZiBwYWdlIGhhcyBjaGFuZ2VkXG4gICAgaWYgKHBhdGhuYW1lID09PSBjdXJyZW50UGFnZSAmJiAhcmV0cnkpIHJldHVybjtcbiAgICBleHBvcnRzLmN1cnJlbnRQYWdlID0gY3VycmVudFBhZ2UgPSBwYXRobmFtZTtcbiAgICAvLyBjbG9zZSBjdXJyZW50IEV2ZW50U291cmNlIGNvbm5lY3Rpb25cbiAgICBjbG9zZVBpbmcoKTtcbiAgICBldnRTb3VyY2UgPSAoMCwgX2V2ZW50c291cmNlKS5nZXRFdmVudFNvdXJjZVdyYXBwZXIoe1xuICAgICAgICBwYXRoOiBgJHthc3NldFByZWZpeH0vX25leHQvd2VicGFjay1obXI/cGFnZT0ke2VuY29kZVVSSUNvbXBvbmVudChjdXJyZW50UGFnZSl9YCxcbiAgICAgICAgdGltZW91dDogNTAwMFxuICAgIH0pO1xuICAgIGV2dFNvdXJjZS5hZGRNZXNzYWdlTGlzdGVuZXIoKGV2ZW50KT0+e1xuICAgICAgICBpZiAoZXZlbnQuZGF0YS5pbmRleE9mKCd7JykgPT09IC0xKSByZXR1cm47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgIC8vIGRvbid0IGF0dGVtcHQgZmV0Y2hpbmcgdGhlIHBhZ2UgaWYgd2UncmUgYWxyZWFkeSBzaG93aW5nXG4gICAgICAgICAgICAvLyB0aGUgZGV2IG92ZXJsYXkgYXMgdGhpcyBjYW4gY2F1c2UgdGhlIGVycm9yIHRvIGJlIHRyaWdnZXJlZFxuICAgICAgICAgICAgLy8gcmVwZWF0ZWRseVxuICAgICAgICAgICAgaWYgKHBheWxvYWQuaW52YWxpZCAmJiAhc2VsZi5fX05FWFRfREFUQV9fLmVycikge1xuICAgICAgICAgICAgICAgIC8vIFBheWxvYWQgY2FuIGJlIGludmFsaWQgZXZlbiBpZiB0aGUgcGFnZSBkb2VzIG5vdCBleGlzdC5cbiAgICAgICAgICAgICAgICAvLyBTbywgd2UgbmVlZCB0byBtYWtlIHN1cmUgaXQgZXhpc3RzIGJlZm9yZSByZWxvYWRpbmcuXG4gICAgICAgICAgICAgICAgZmV0Y2gobG9jYXRpb24uaHJlZiwge1xuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHBhZ2VSZXMpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdlUmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ29uLWRlbWFuZC1lbnRyaWVzIGZhaWxlZCB0byBwYXJzZSByZXNwb25zZScsIGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b24tZGVtYW5kLWVudHJpZXMtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2xvc2VQaW5nIiwic2V0dXBQaW5nIiwiY3VycmVudFBhZ2UiLCJfZXZlbnRzb3VyY2UiLCJyZXF1aXJlIiwiZXZ0U291cmNlIiwiY2xvc2UiLCJhc3NldFByZWZpeCIsInBhdGhuYW1lRm4iLCJyZXRyeSIsInBhdGhuYW1lIiwiZ2V0RXZlbnRTb3VyY2VXcmFwcGVyIiwicGF0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsInRpbWVvdXQiLCJhZGRNZXNzYWdlTGlzdGVuZXIiLCJldmVudCIsImRhdGEiLCJpbmRleE9mIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsImludmFsaWQiLCJzZWxmIiwiX19ORVhUX0RBVEFfXyIsImVyciIsImZldGNoIiwibG9jYXRpb24iLCJocmVmIiwiY3JlZGVudGlhbHMiLCJ0aGVuIiwicGFnZVJlcyIsInN0YXR1cyIsInJlbG9hZCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/on-demand-entries-utils.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("./node_modules/next/dist/client/dev/amp-dev.js"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);